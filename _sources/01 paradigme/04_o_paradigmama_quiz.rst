Програмске парадигме - квиз
===========================

.. quizq::

    .. mchoice:: kompajler
        :answer_a: дебагер
        :answer_b: профајлер
        :answer_c: компајлер (компилатор)
        :answer_d: едитор
        :correct: c

        Програм који преводи програм са вишег програмског језика на
        машински језик назива се:

    .. mchoice:: tradicionalne
        :answer_a: објектнооријентисана
        :answer_b: функционална
        :answer_c: императивна
        :answer_d: парадигма заснована на машинском учењу
        :answer_e: логичка
        :correct: d

        Шта од наведеног не спада у традиционалне програмске парадигме:

    .. mchoice:: csharp
        :answer_a: логичку парадигму
        :answer_b: функционалну парадигму
        :answer_c: објектнооријентисану парадигму
        :answer_d: императивну парадигму
        :correct: c

        Иако комбинује елементе различитих програмских парадигми,
        језик C# се ипак може највише сврстати у:

    .. mchoice:: deklarativno programiranje
        :answer_a: императивно програмирање
        :answer_b: декларативно програмирање
        :answer_c: асемблерско програмирање
        :answer_d: вештачка интелигенција
        :correct: b

        Стил програмирања у којем програмер описује проблем (шта треба
        решити) уместо поступка решавања проблема (како проблем
        решити) назива се:

    .. mchoice:: nizkoraka
        :answer_a: декларативно програмирање
        :answer_b: функционално програмирање
        :answer_c: императивно програмирање
        :answer_d: паралелно програмирање
        :correct: c
                  
        У којој програмској парадигми се програмира дефинисањем низа
        корака који мењају стање програма?
       
        
    .. mchoice:: stanje
        :answer_a: бочне ефекте
        :answer_b: референцијалну транспарентност
        :answer_c: наредбу доделе
        :answer_d: стање тог програма
        :correct: b

        Вредности свих променљивих у неком тренутку извршавања императивног
        програма одређују:

    .. mchoice:: iteracija
        :answer_a: итеративно
        :answer_b: рекурзивно
        :answer_c: функционално
        :answer_d: објектима
        :correct: a

        У императивном програмирању алгоритми се обично изражавају:

    .. mchoice:: goto
        :answer_a: омогућава да се програми запишу краће и јасније
        :answer_b: доводи до неразумљивих и компликованих програма
        :answer_c: представља основу функционалног програмирања
        :answer_d: представља основу машинског учења
        :correct: b

        Наредба скока GOTO:

    .. mchoice:: globalne
        :answer_a: отежавају анализу програма јер њихова вредност може бити измењена из различитих функција, па је у случају грешке потребно анализирати све те функције
        :answer_b: су пожељније од локалних зато што се обично налазе на почетку програма па се њихов тип лако одређује
        :answer_c: троше вишеструко више меморије од локалних променљивих
        :answer_d: не постоје у императивним програмским језицима
        :correct: a

        Глобалне променљиве:

    .. mchoice:: oop
        :answer_a: наслеђивање
        :answer_b: полиморфизам
        :answer_c: рекурзија
        :answer_d: учауравање
        :correct: c

        Основна карактеристика објектнооријентисаних програмских
        језика није:
        
    .. mchoice:: nasledjivanje
        :answer_a: апстракција
        :answer_b: енкапсулација
        :answer_c: полиморфизам
        :answer_d: наслеђивање
        :correct: d
                  
        Који концепт објектно оријентисане парадигме омогућава
        креирање нових класа на основу постојећих класа?
