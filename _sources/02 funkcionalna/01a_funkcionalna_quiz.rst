Функционална парадигма - квиз
=============================

.. quizq::

    .. mchoice:: funkcijeprvogreda
        :answer_a: могу се креирати само унутар класа
        :answer_b: могу се правити показивачи на функције
        :answer_c: функције се могу доделити променљивима, проследити као аргументи и вратити као резултати функција
        :answer_d: функције не могу користити глобалне променљиве
        :correct: c

        Шта значи да су у функционалним програмским језицима функције
        "грађани првог реда":

        
    .. mchoice:: bocniefekti
        :answer_a: бочни ефекти подразумевају да се током израчунавања израза или функције промени стање програма (нпр. вредност глобалне променљиве)
        :answer_b: бочни ефекти подразумевају да се тело петље мора увући бар три карактера
        :answer_c: бочни ефекти подразумевају да се вредност израза израчунава само када је то неопходно
        :answer_d: бочни ефекти подразумевају да функције треба да буду дефинисане помоћу ламбда израза
        :correct: a

        Шта су "бочни" тј. "пропратни" ефекти?

    .. mchoice:: lenjost
        :answer_a: функције увек враћају исти резултат за исте аргументе (њихово израчунавање не зависи од стања програма)
        :answer_b: програмери не треба да буду лењи
        :answer_c: алгоритам треба да буде што краћи да би се лакше имплементирао
        :answer_d: вредност израза се израчунава само када је то неопходно
        :correct: d

        Шта се подразумева под лењим израчунавањем?
        
    .. mchoice:: karijevanje
        :answer_a: су увек функције једне променљиве
        :answer_b: имају исти број аргумената и повратних резултата
        :answer_c: никад немају име (увек су анонимне)
        :answer_d: не могу да приступе стању програма
        :correct: a

        Каријеве функције:

    .. mchoice:: rerurzija
        :answer_a: рекурзија није подржана у функционалном програмирању
        :answer_b: рекурзија се може користити искључиво за обраду низова
        :answer_c: рекурзија се у функционалном програмирању често користи уместо петљи
        :answer_d: рекурзивне функције не смеју да приступе стању програма (глобалним променљивим)
        :correct: c

        Која од следећих тврдњи је тачна за рекурзију у функционалној парадигми:
                  
    .. mchoice:: funkcionalni jezici
        :answer_a: C#
        :answer_b: Haskell
        :answer_c: Lisp
        :answer_d: C
        :correct: d

        Који од наредних језика не користи никакве елементе функционалне парадигме?

    .. mchoice:: filter
        :answer_a: map
        :answer_b: filter
        :answer_c: sum
        :answer_d: не постоји таква функција
        :correct: b

        У језику C# метода Where библиотеке Linq издваја све елементе серије
        који задовољавају неко задато својство. Која функција у језику Haskll
        ради то исто?
           
