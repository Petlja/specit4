Објектнооријентисана парадигма
==============================

Објектнооријентисану парадигму сте веома детаљно изучили у трећем
разреду у предмету Објектнооријентисано програмирање, па се нећемо
пуно задржавати на њеном описивању.

Објектно оријентисана парадигма (ООП) је концептуални модел
програмирања који се темељи на организовању и структуирању кода око
"објеката", који су инстанциране представе стварних ентитета или
апстрактних концепта. ООП промовише начин размишљања о програмима као
колекцији објеката који међусобно комуницирају путем дефинисаних
интеракција. Објекти једни другима шаљу поруке (тако што позивају
методе које су део јавног интерфејса). Ова парадигма пружа низ
предности као што су модуларност, поновно коришћење кода, лакше
одржавање и разумевање, те олакшава развој комплексних система.

Кључни концепти ООП су:

1. **Објекти:** Објекти су инстанце класа које дефинишу својства
   (атрибуте) и понашање (методе). На пример, у апликацији за
   управљање корисницима, сваки корисник може бити представљен као
   објекат са својим атрибутима као што су име, мејл адреса и старост.

2. **Класе:** Класе су шаблони који дефинишу структуру и понашање
   објеката. Оне садрже дефиниције атрибута и метода које ће објекти
   имати. На пример, "Корисник" може бити класа која дефинише својства
   и методе заједничке свим корисницима.

3. **Енкапсулација** се односи на паковање података (атрибута) и
   функционалности (метода) унутар једног ентитета - објекта. Идеја је
   да се објекти делују као "капсуле" које садрже своје унутрашње
   стање и операције, док су детаљи имплементације скривени од
   спољашњег света тј. од програмера који користе класе и
   објекте. Енкапсулација омогућава да се приступ и баратање
   подацима врше само путем добро дефинисаних метода, чиме се
   осигурава конзистентно стање објекта и смањује ризик од нежељених
   модификација.

   Предности енкапсулације укључују:

   *Скривање детаља имплементације:* Енкапсулација омогућава да се
   промене у унутрашњој имплементацији објекта изврше без утицаја на
   кориснике тог објекта. Корисници само користе јавне методе за
   интеракцију са објектима, док је комплексност детаља сакривена.

   *Заштита и валидација:* Објекти могу примењивати правила за приступ
   и манипулацију подацима. Ово омогућава да се валидира унос података
   и да се осигура њихова исправност пре него што буду записани.

   *Модуларност и поновно коришћење:* Енкапсулација омогућава
   развијање модула који се могу користити независно од других делова
   апликације. Објекти се могу поновно користити у различитим
   контекстима, смањујући потребу за писањем истог кода више пута.

   *Одржавање и рефакторисање:* Промене у имплементацији објекта могу
   се обавити унутар саме капсуле без утицаја на остатак система. Ово
   олакшава одржавање и рефакторисање кода.

   *Смањење грешака:* Енкапсулација смањује могућност грешака јер се
   манипулација подацима обавља само путем строго дефинисаних метода
   које су тестиране и верификоване.

   Да би се постигла енкапсулација, програмски језици омогућавају
   дефинисање приступних модификатора који контролишу видљивост
   атрибута и метода изван објекта. Приступни модификатори омогућавају
   програмерима да прецизно дефинишу који делови објекта су доступни
   изван њега, чиме се имплементира принцип енкапсулације.

4. **Наслеђивање:** Наслеђивање омогућава креирање нових класа на
   основу већ постојећих класа. Ова парадигма подржава идеју да нове
   класе могу наследити (преузети) интерфејс тј. својства и методе
   постојећих класа, чиме се олакшава поновно коришћење кода и
   организација структуре.

   *Базна Класа:* Базна класа је оригинална класа која дефинише
   својства и методе које ће бити наслеђене. Ова класа се такође
   назива и родитељском класом, надкласом или суперкласом.

   *Изведена Класа:* Изведена класа је нова класа која се креира на
   основу постојеће класе. Ова класа наслеђује својства и методе базне
   класе, али може додати своје додатне карактеристике или
   предефинисати постојеће методе.

   *Наслеђивање атрибута и метода:* Изведена класа аутоматски
   наслеђује све атрибуте (својства) и методе (укључујући и њихову
   имплементацију) дефинисане у базној класи. То омогућава да се
   сличне класе репрезентују на логичан и организован начин.

   *Додатни атрибути и методи:* Изведена класа може додати нове методе
   и атрибути који нису присутни у базној класи. Ово омогућава да се
   прошири функционалност и додају нове карактеристике без утицаја на
   базну класу.

   *Предефинисање Метода:* Изведена класа може предефинисати
   (енгл. override) методе базне класе тако да се прилагоде
   специфичним потребама. Ово омогућава да се исте методе понашају
   другачије у различитим контекстима.

   *Вишеструко наслеђивање (у одређеним језицима):* Неки програмски
   језици подржавају вишеструко наслеђивање, што значи да изведена
   класа може наследити својства и методе из више базних
   класа. Међутим, ова функционалност може постати комплексна и
   довести до "дијамантског проблема" у неким случајевима.

   Наслеђивање омогућава ефикасно поновно коришћење кода, јер се
   постојеће имплементације могу користити као основа за нове
   класе. Ово олакшава организацију, одржавање и разумевање кода, јер
   се сличне класе групишу заједно, а заједнички код се дели.

5. **Полиморфизам:** Полиморфизам омогућава истоименим методама да се
   понашају различито у зависности од класе којој припадају тј.
   омогућава различитим објектима да се понашају на различите начине,
   чак и ако деле исти назив методе. Полиморфизам омогућава да се иста
   метода користи за различите типове објеката, чиме се
   поједностављује кôд и олакшава рад са разноликим ентитетима.

   Полиморфизам омогућава и да класа има методе са истим именом, али
   са различитим потписима.

   *Предефинисање метода*: Када изведена класа наслеђује методу од
   своје базне класе, може предефинисати (override) ту методу да би се
   прилагодила свом специфичном понашању. Ово омогућава да метода има
   другачији садржај у различитим класама.

   *Динамичко везивање*: Полиморфизам омогућава да се одабере права
   верзија методе током извршавања, а не током компилације. Ово се
   назива динамичко повезивање или касно повезивање, и омогућава да се
   изабере права метода на основу стварног типа објекта који се
   обрађује.

   *Интерфејси и апстрактне класе*: Полиморфизам често се постиже кроз
   употребу интерфејса и апстрактних класа. Интерфејси дефинишу скуп
   метода које се морају имплементирати у изведеним класама, док
   апстрактне класе садрже недефинисане методе које се морају
   имплементирати у конкретним подкласама.

   *Поједностављена комуникација*: Полиморфизам омогућава да се исте
   операције примењују на различите типове објеката без потребе за
   анализом њиховог типа наредбама гранања. На пример, ако имате
   различите геометријске облике, можете користити исту методу за
   израчунавање површине без обзира на то који облик користите.

   Полиморфизам чини код флексибилнијим, омогућавајући програмерима да
   раде са различитим типовима објеката користећи исте методе и
   сучеља. То олакшава развој, одржавањ

Објектно оријентисана парадигма се примењује у многим програмским
језицима као што су Java, Python, C++, C#, Ruby итд. ООП омогућава
организацију кода на начин који одражава стварни свет и олакшава
развој скалабилних и одрживих апликација.
